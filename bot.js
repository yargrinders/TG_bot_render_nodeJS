require("dotenv").config();
const express = require("express");
const TelegramBot = require("node-telegram-bot-api");

const token = process.env.TELEGRAM_BOT_TOKEN;
const port = process.env.PORT || 3000;
const webhookUrl = process.env.WEBHOOK_URL; // URL —Å–µ—Ä–≤–µ—Ä–∞

const bot = new TelegramBot(token);
const app = express();
app.use(express.json());
app.use(express.static('public'));

// ======= –î–ê–ù–ù–´–ï –ò –°–û–°–¢–û–Ø–ù–ò–ï =======

// –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const users = [
  { name: "üî• –ö–æ–ª—è", id: 7160070476, username: "nikolai kerankov" }, // –û–≥–æ–Ω—å, —ç–Ω–µ—Ä–≥–∏—è 7160070476
  { name: "‚ö° –°–∞—à–∞", id: 5297933809, username: "aleksshtanko6" }, // –ú–æ–ª–Ω–∏—è, —Å–∫–æ—Ä–æ—Å—Ç—å
  { name: "üéÆ –í–∏—Ç—è", id: 7884535660, username: "poltorashkaexe" }, // –ì–µ–π–º–µ—Ä, –≤–µ—Å–µ–ª—å–µ
  { name: "üï∂Ô∏è –†–∞–ª—å—Ñ", id: 284203271, username: "R.G" }, // –ö—Ä—É—Ç–æ–π —Å—Ç–∏–ª—å, –æ—á–∫–∏
  { name: "üë®‚Äçüíª –Ø—Ä–∏–∫", id: 910176803, username: "Yargrinders" }, // –ó–≤–µ–∑–¥–∞, —è—Ä–∫–æ—Å—Ç—å
  // { name: "üë§ –ê–†–¢", id: 1472395097, username: "Amontearx" },
  // { name: "üë§ Admin", id: 5199037185, username: "–Ø—Ä–æ—Å–ª–∞–≤ –Æ—â–µ–Ω–∫–æ" },
];

// –ú–∞—Å—Å–∏–≤ —à–∞–±–ª–æ–Ω–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞
const messages = [
  "–ü—Ä–∏–≤–µ—Ç @$username, –∏–≥—Ä–∞–µ–º? üöÄ - –¢–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç @$caller_name",
  "@$username, –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Å—è –∫ –∏–≥—Ä–µ! üéÆ - –¢–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç @$caller_name",
  "–≠–π, @$username! –í—Ä–µ–º—è –¥–ª—è –∏–≥—Ä—ã! ‚è∞ - –¢–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç @$caller_name",
  "@$username, –∫–∞–∫ –Ω–∞ —Å—á–µ—Ç –ø–æ–∏–≥—Ä–∞—Ç—å –≤ Fortnite ?! üëã - –¢–µ–±—è –≤—ã–∑—ã–≤–∞–µ—Ç @$caller_name"
];

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –±–æ—Ç–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const botStatus = {
  startTime: new Date(),
  lastPingTime: new Date(),
  totalPings: 0
};

// ======= –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò =======

/**
 * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –º–∞—Å—Å–∏–≤–∞ —à–∞–±–ª–æ–Ω–æ–≤
 * @returns {string} - –°–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
 */
function getRandomMessage() {
  const randomIndex = Math.floor(Math.random() * messages.length);
  return messages[randomIndex];
}

/**
 * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ 2 –≤ —Ä—è–¥)
 * –∏ –∫–Ω–æ–ø–∫–æ–π "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö" —Å–≤–µ—Ä—Ö—É
 * @param {Array} users - –ú–∞—Å—Å–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
 * @returns {Array} - –ú–∞—Å—Å–∏–≤ –∫–Ω–æ–ø–æ–∫ –¥–ª—è inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
 */
function generateKeyboard(users) {
  const keyboard = [
    [{ text: "üîä –ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö", callback_data: "call_all" }]
  ];
  
  // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ 2 –≤ —Ä—è–¥
  for (let i = 0; i < users.length; i += 2) {
    const row = [];
    row.push({ text: users[i].name, callback_data: users[i].id.toString() });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ç–æ—Ä—É—é –∫–Ω–æ–ø–∫—É –≤ —Ä—è–¥, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if (users[i + 1]) {
      row.push({ text: users[i + 1].name, callback_data: users[i + 1].id.toString() });
    }
    
    keyboard.push(row);
  }
  
  return keyboard;
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ –∏–º—è –±–µ–∑ —ç–º–æ–¥–∑–∏
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} defaultUser - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @returns {string} - –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –±–µ–∑ —ç–º–æ–¥–∑–∏
 */
function getUserName(userId, defaultUser = {}) {
  const userFromArray = users.find(u => u.id === userId);
  
  if (userFromArray) {
    return userFromArray.name
    .replace("üë§ ", "")
    .replace("üî• ", "")
    .replace("‚ö° ", "")
    .replace("üéÆ ", "")
    .replace("üï∂Ô∏è ", "")
    .replace("üë®‚Äçüíª ", "")
    .trim(); // –£–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã –≤ –Ω–∞—á–∞–ª–µ –∏ –∫–æ–Ω—Ü–µ
  }
  
  return defaultUser.first_name || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
}

/**
 * –ù–∞—Ö–æ–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ id –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ username
 * @param {number} userId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * @param {Object} defaultUser - –û–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 * @returns {string} - Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
function getUserUsername(userId, defaultUser = {}) {
  const userFromArray = users.find(u => u.id === userId);
  
  if (userFromArray && userFromArray.username) {
    return userFromArray.username;
  }
  
  return defaultUser.username || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å";
}

// ======= –ù–ê–°–¢–†–û–ô–ö–ê EXPRESS =======

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è –±–æ—Ç–∞
bot.setWebHook(`${webhookUrl}/bot${token}`);

// –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
app.post(`/bot${token}`, (req, res) => {
  bot.processUpdate(req.body);
  res.sendStatus(200);
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è UptimeRobot
app.get('/ping', (req, res) => {
  const now = new Date();
  botStatus.totalPings++;
  
  // –í—ã—á–∏—Å–ª—è–µ–º –≤—Ä–µ–º—è —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –ø–∏–Ω–≥–∞
  const timeSinceLastPing = now - botStatus.lastPingTime;
  botStatus.lastPingTime = now;
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –±–æ—Ç–∞
  res.status(200).json({
    status: 'ok',
    message: 'Bot is running',
    uptime: Math.floor((now - botStatus.startTime) / 1000) + ' seconds',
    since_last_ping: Math.floor(timeSinceLastPing / 1000) + ' seconds',
    total_pings: botStatus.totalPings,
    server_time: now.toISOString()
  });
  
  console.log(`[UptimeRobot] Bot pinged at ${now.toISOString()} (ping #${botStatus.totalPings})`);
});

// –ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
app.get('/', (req, res) => {
  const now = new Date();
  const uptimeSeconds = Math.floor((now - botStatus.startTime) / 1000);
  const uptimeFormatted = formatUptime(uptimeSeconds);
  const lastPingDelta = Math.floor((now - botStatus.lastPingTime) / 1000);
  const lastPingFormatted = lastPingDelta > 60 
    ? `${Math.floor(lastPingDelta / 60)} –º–∏–Ω ${lastPingDelta % 60} —Å–µ–∫ –Ω–∞–∑–∞–¥` 
    : `${lastPingDelta} —Å–µ–∫ –Ω–∞–∑–∞–¥`;
  
  // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —É–¥–æ–±–æ—á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
  const formatDate = (date) => {
    return date.toLocaleString('ru-RU', {
      day: '2-digit',
      month: '2-digit',
      year: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  };
  
  res.status(200).send(`
    <!DOCTYPE html>
    <html lang="ru">
      <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>Telegram Bot Status</title>
        <link rel="preconnect" href="https://fonts.googleapis.com">
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
        <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@400;500;700&display=swap" rel="stylesheet">
        <link rel="stylesheet" href="/styles/bot-status.css">
      </head>
      <body>
        <div class="container">
          <div class="header">
            <h1>Telegram Bot Status</h1>
            <p class="subtitle">–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞</p>
            <div class="status-indicator">
              <div class="status-dot"></div>
              –û–Ω–ª–∞–π–Ω
            </div>
          </div>
          
          <div class="card">
            <div class="card-header">–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
            <div class="card-body">
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">–ó–∞–ø—É—â–µ–Ω</div>
                  <div class="info-value" id="start-time" data-start-time="${botStatus.startTime.toISOString()}">${formatDate(botStatus.startTime)}</div>
                </div>
                <div class="info-item">
                  <div class="info-label">–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã</div>
                  <div class="info-value" id="uptime-value">${uptimeFormatted}</div>
                </div>
                <div class="info-item">
                  <div class="info-label">–ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∏–Ω–≥</div>
                  <div class="info-value">${formatDate(botStatus.lastPingTime)} (${lastPingFormatted})</div>
                </div>
                <div class="info-item">
                  <div class="info-label">–í—Å–µ–≥–æ –ø–∏–Ω–≥–æ–≤</div>
                  <div class="info-value">${botStatus.totalPings.toLocaleString()}</div>
                </div>
              </div>
            </div>
          </div>
          
          <div class="card">
            <div class="card-header">–°–∏—Å—Ç–µ–º–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</div>
            <div class="card-body">
              <div class="info-grid">
                <div class="info-item">
                  <div class="info-label">–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è —Å–µ—Ä–≤–µ—Ä–∞</div>
                  <div class="info-value">${formatDate(now)}</div>
                </div>
                <div class="info-item">
                  <div class="info-label">–ü–æ—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞</div>
                  <div class="info-value">${port}</div>
                </div>
                <div class="info-item">
                  <div class="info-label">Node.js –≤–µ—Ä—Å–∏—è</div>
                  <div class="info-value">${process.version}</div>
                </div>
                <div class="info-item">
                  <div class="info-label">–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞</div>
                  <div class="info-value">${process.platform}</div>
                </div>
              </div>
              <div class="info-item" style="margin-top: 1rem;">
                <div class="info-label">Endpoint –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞</div>
                <div class="info-value highlight">/ping</div>
              </div>
            </div>
          </div>
          
          <div class="footer">
            <p>¬© ${new Date().getFullYear()} Telegram Bot Server</p>
            <p id="last-update">–û–±–Ω–æ–≤–ª–µ–Ω–æ: ${new Date().toLocaleTimeString()}</p>
          </div>
        </div>
        
        <script src="/scripts/bot-status.js"></script>
      </body>
    </html>
  `);
});

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–Ω–∏, —á–∞—Å—ã, –º–∏–Ω—É—Ç—ã, —Å–µ–∫—É–Ω–¥—ã)
 * @param {number} seconds - –í—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
 * @returns {string} - –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
 */
function formatUptime(seconds) {
  const days = Math.floor(seconds / 86400);
  seconds %= 86400;
  
  const hours = Math.floor(seconds / 3600);
  seconds %= 3600;
  
  const minutes = Math.floor(seconds / 60);
  const remainingSeconds = seconds % 60;
  
  const parts = [];
  
  if (days > 0) parts.push(`${days} ${pluralize(days, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')}`);
  if (hours > 0) parts.push(`${hours} ${pluralize(hours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')}`);
  if (minutes > 0) parts.push(`${minutes} ${pluralize(minutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')}`);
  if (remainingSeconds > 0 || parts.length === 0) {
    parts.push(`${remainingSeconds} ${pluralize(remainingSeconds, '—Å–µ–∫—É–Ω–¥–∞', '—Å–µ–∫—É–Ω–¥—ã', '—Å–µ–∫—É–Ω–¥')}`);
  }
  
  return parts.join(', ');
}

/**
 * –°–∫–ª–æ–Ω—è–µ—Ç —Å–ª–æ–≤–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —á–∏—Å–ª–∞
 * @param {number} number - –ß–∏—Å–ª–æ
 * @param {string} one - –§–æ—Ä–º–∞ –¥–ª—è 1
 * @param {string} few - –§–æ—Ä–º–∞ –¥–ª—è 2-4
 * @param {string} many - –§–æ—Ä–º–∞ –¥–ª—è 5-20
 * @returns {string} - –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å–∫–ª–æ–Ω–µ–Ω–Ω–æ–µ —Å–ª–æ–≤–æ
 */
function pluralize(number, one, few, many) {
  if (number % 10 === 1 && number % 100 !== 11) {
    return one;
  }
  if ([2, 3, 4].includes(number % 10) && ![12, 13, 14].includes(number % 100)) {
    return few;
  }
  return many;
}

// ======= –ù–ê–°–¢–†–û–ô–ö–ê TELEGRAM –ë–û–¢–ê =======

// –ö–æ–º–∞–Ω–¥–∞ /start —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
bot.onText(/\/start/, (msg) => {
  const chatId = msg.chat.id;
  const userId = msg.from.id;
  
  const userName = getUserName(userId, msg.from);
  
  bot.sendMessage(chatId, `–ü—Ä–∏–≤–µ—Ç, ${userName} \n\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ - ü§ñ:`, {
    reply_markup: { inline_keyboard: generateKeyboard(users) }
  });
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
bot.on("callback_query", (query) => {
  const chatId = query.message.chat.id;
  const callbackData = query.data;
  
  // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –∫–æ–ª–±—ç–∫
  const callerId = query.from.id;
  const callerUsername = getUserUsername(callerId, query.from);
  const callerName = getUserName(callerId, query.from);
  
  // –ï—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–∑–≤–∞—Ç—å –≤—Å–µ—Ö"
  if (callbackData === "call_all") {
    // –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const mentionList = users
      .filter(user => user.username) // –¢–æ–ª—å–∫–æ —Ç–µ, —É –∫–æ–≥–æ –µ—Å—Ç—å username
      .map(user => `@${user.username}`)
      .join(" ");
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ –≤—Å–µ–º–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    bot.sendMessage(
      chatId, 
      `üì¢ –£ –∫–æ–≥–æ –µ—Å—Ç—å –∂–µ–ª–∞–Ω–∏–µ —Å–µ–≥–æ–¥–Ω—è –ø–æ–∏–≥—Ä–∞—Ç—å?! ${mentionList} - –í—ã–∑—ã–≤–∞–µ—Ç @${callerName}`
    );
    
    return;
  }
  
  // –û–±—ã—á–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  const userId = parseInt(callbackData);
  const user = users.find(u => u.id === userId);

  if (user) {
    if (user.username) {
      // –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∑–∞–º–µ–Ω—è–µ–º –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä—ã
      let message = getRandomMessage()
        .replace('@$username', `@${user.username}`)
        .replace('@$caller_name', `@${callerUsername}`);
      
      bot.sendMessage(chatId, message);
    } else {
      bot.sendMessage(chatId, `[${user.name}](tg://user?id=${user.id})`, { parse_mode: "MarkdownV2" });
    }
  } else {
    bot.sendMessage(chatId, "–û—à–∏–±–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.");
  }
});

// ======= –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =======

app.listen(port, () => {
  console.log(`–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${port}`);
  console.log(`–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${webhookUrl}/ping`);
  console.log(`–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É ${webhookUrl}`);
});